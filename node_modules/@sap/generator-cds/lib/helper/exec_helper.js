const cp = require('child_process');
const os = require('os');
const util = require('util');

const execFile = util.promisify(cp.execFile);

class ExecHelper {

    /**
     * Execute a command and show output in console, if verbose
     * spawn has problems with promisify so use native approach w/ Promise
     *
     * @param {call this command array (command and args)} cmd
     * @param {the working folder} cwd
     * @param {show command's output, default false} verbose
     */
    static spawnCommand(cmdArray, cwd, options, logger) {
        options = options || {};
        return new Promise((resolve, reject) => {
            if (options.debug) {
                logger.debug(cmdArray.join(' '));
            }

            // remove command form array and reduce array by one
            const command = cmdArray.shift();
            const cmdArguments = cmdArray;

            const spawnOptions = {
                stdio: (options.quiet ? 'ignore' : 'inherit'), // pipe to host stdio if not quiet
                cwd: cwd,
                shell: (os.platform() === 'win32') // for windows only
            }

            const child = cp.spawn(command, cmdArguments, spawnOptions);

            child.on('close', (code) => {
                if (code === 0) {
                    resolve();
                } else {
                    reject(new Error(`${command} ${cmdArguments.join(' ')} failed with code ${code}`));
                }
            });

            child.on('error', (err) => {
                reject(err);
            });
        });
    }

    /**
     * Capture output of command as promise result.
     *
     * @param {call this command array (command and args) and return output as promise resolve} cmd
     * @param {the working folder} cwd
     * @returns {stdout, stderr}
     */
    static async executeCommand(cmdArray, cwd = process.cwd()) {
        const cmd = cmdArray.shift();
        return await execFile(cmd, cmdArray, {
            cwd: cwd,
            shell: (os.platform() === 'win32')
        });
    }
}

module.exports = ExecHelper;
