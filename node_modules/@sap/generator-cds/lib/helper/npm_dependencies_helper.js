const i18n = require('../i18n/i18n');
const ExecHelper = require('./exec_helper');
const TargetError = require('./target_error');


class NpmDependenciesHelper {

    static async updateDependencies(dependencies = {}, options = {}, logger = {}) { // NOSONAR

        const result = {};

        const promises = Object.keys(dependencies).map(async (module) => { // NOSONAR
            // add here to ensure the right sequence in new object
            result[module] = dependencies[module];
            if (dependencies[module] === NpmDependenciesHelper.REPLACE_TOKEN) {
                const cmd = ['npm', 'show', module, 'version', '--json']

                if (options.debug) {
                    cmd.push('-dd');
                }
                try {
                    const res = await ExecHelper.executeCommand(cmd);
                    const maxVersion = JSON.parse(res.stdout.toString());

                    result[module] = `^${maxVersion}`;
                    logger.log?.(`${module}: ${maxVersion}`);
                    if (options.debug) {
                        logger.warn(res.stderr);
                        logger.debug(`${module}: ${result[module]}`);
                    }
                } catch (err) {

                    // rethrow javascript system errors, like TypeError, ReferenceError, ...
                    if (err.name !== 'Error') {
                        throw err;
                    }

                    // specific 404 (not found) error due to missing npm registry
                    if (err.message && err.message.includes('E404') && err.message.includes('@sap/')) {
                        throw new Error(i18n.t(i18n.init_error_sap_registry_missing, { module }));
                    }

                    throw new TargetError(i18n.t(i18n.init_error_getting_npm_lib_version, { module }), err);
                }
            }
        });

        await Promise.all(promises);
        return result;
    }

}

NpmDependenciesHelper.REPLACE_TOKEN = '$USED_VERSION';

module.exports = NpmDependenciesHelper;
