const Constants = require('../constants');


module.exports = {


//
//
//
// command.js
//

    command_invalid_option: `Invalid option {{optionName}} with value {{optionValue}}`,

    command_invalid_option_value: `Invalid value {{optionValue}} for option {{optionName}}`,

    command_target_exists: `Target folder {{moduleFolder}} already exists and has content.`,

    command_unknown: `Unknown command '{{cmd}}'. See 'cds-gen help' for all available commands`,

    command_summary: `Summary`,

    command_touched_file: `Created/modified: {{file}}`,

    command_invalid_folder_name: `Folder name '{{folderName}}' not supported under windows, use --force to create anyway`,


//
//
//
// add.js
//

    add_copying_templates: `Copying templates for type {{moduleType}} to {{moduleFolder}} ...`,

    add_different_odata_version: `Project already uses a different odata version "{{odataVersion}}", overwriting with "{{newVersion}}"...`,

    wrong_odata_version_for_nodejs: `Srv type nodejs only supports odata version v4 and not v2. Will use v4.`,

//
//
//
// init.js
//

    init_help: `
# SYNOPSIS

    *cds-gen init* [<dir>] [<options>]

    Creates a new project in the given folder.


# OPTIONS

    *--debug*

        Print additional debug info to console, also enabled via process.env.DEBUG.
        This overrules --quiet and adds verbose output.

    *--db-technology*

        Specify the database technology, currently *hana* and *sqlite* are supported.

    *--force*

        Do not use existing entries, e.g. in mta.yaml but create new ones

    *--insecure*

        Skip creation of uaa entries.

    *--java-package [<java package id>]*

        The package ID for the java srv module (only needed if srv-technology is java).
        Default is: *my.company*.

    *--modules [(moduleType)]*

        A comma-separated list of the modules to be created.
        Valid modules are *srv* and *db*.
        Default is: *{empty}*.

    *--mta*

        Also create an mta.yaml file, is set by --pipeline.

    *--odata-version*

        Generate java service based on given odata version.
        Valid values are *v2* and *v4*.
        Default is: v2

    *--pipeline*

        Add support for pipeline integration, also creates mta.yaml.

    *--quiet*

        No console output. Overruled by --verbose and --debug

    *--skip-install*

        Don't run npm install after project creation

    *--skip-sample-models*

        Do not create sample cds files.

    *--srv-memory*

        Memeory allocated by defaut for service. Syntax is number followed by unit chararcter,
        e.g. 512M, 1024K

    *--srv-technology [<technology>]*

        The technology to use for the srv module (if specified / selected).
        Valid values are *java* and *nodejs*.
        Default is: *nodejs*

    *--verbose*

        More output on console. Overruling --quiet, switched on by --debug.

# EXAMPLES

    *cds-gen* init project
    *cds-gen* init project --modules srv,db
    *cds-gen* init project --modules srv --srv-technology java

`,

    init_initializing_project: `Initializing project in folder {{destination}}.`,

    init_reinitializing_project: `Reinitializing project in folder {{destination}}.`,

    init_updating_dependencies: `Updating npm dependencies in {{packageJsonPath}} ...`,

    init_creating_mta_file: `Creating mta file {{yamlPath}} ...`,

    init_creating_java_srv: `Creating java srv module...`,

    init_postprocessing_java_srv: `Post processing java srv module...`,

    init_running_npm_install: `Running npm install...`,

    init_finished_successfully: `Done.`,
    init_finished_successfully_url: `Learn about first steps at {{url}}`,

    init_srv_java_and_db_hana: `When using service technology "${Constants.SRV_TECHNOLOGY_JAVA}"
also use database technology "${Constants.DB_TECHNOLOGY_HANA}",
e.g. --db-technology ${Constants.DB_TECHNOLOGY_HANA}`,

    init_invalid_project_path: `Project path is invalid. Must be below curent folder.`,

    init_duplicate_module_type: `Cannot create folder {{newModuleFolder}} with type {{type}}. Folder {{folder}} already declares this module type. Only one is allowed.`,

    init_using_first_hdi_container: `Found more than one hdi container. Using {{hdiContainerName}} for folder {{folderName}}.`,

    init_using_only_hdi_container: `Using exisiting hdi container {{hdiContainerName}} for folder {{folderName}}.`,

    init_error_getting_npm_lib_version: `Could not get version for npm library {{module}}.`,

    init_error_sap_registry_missing: `Could not find module {{module}}. Make sure the SAP npm registry is set by running 'npm config set @sap:registry "https://npm.sap.com"'.`, // NOSONAR

    init_using_force: `Using force to circumvent certain checks...`,

    init_project_name_help_error: `Did you mean 'help init'...? Use --force to really create a project named 'help'`,
//
//
//
// version.js
//

    version_help: `
# SYNOPSIS

    *cds-gen version*
    *cds-gen -v*

    Prints the version of CDS-GEN.
`,


    t: _t
};


const TEMPLATE_REGEX = /\{\{([^{}]+)\}\}/gi;
function _t(text, context) {
    let result = text;
    if (context) {
        let match = TEMPLATE_REGEX.exec(text);
        while (match != null) {
            const value = context[match[1].trim()];
            if (value !== undefined) {
                result = result.replace(match[0], value);
            }
            match = TEMPLATE_REGEX.exec(text);
        }
    }
    return result;
}
