/// <reference types="node" />

declare module '@sap/generator-cds' {

  /**
   * An interface providing logging functionality.
   */
  export interface Logger {
    /**
     * Writes a message to log.
     * @param message the message to write to log
     */
    log(message: string): void;

    /**
     * Writes a debug message to log.
     * @param message the message to write to log
     */
    debug(message: string): void;

    /**
     * Writes a warning message to log.
     * @param message the message to write to log
     */
    warn(message: string): void;

    /**
     * Writes an error to log.
     * @param Error the error to write to log
     */
    error(error: Error): void;
  }

  /**
   * This is a helper interface to provide support for different file system implementations.
   * Depending on the scenario different file systems will be used, e.g. Yeoman vs. native FS.
   */
  export interface FsHelper {
    /**
     * Copies a file or folder from given source to destination.
     * @param source the source path
     * @param destination the destination path
     * @param options optional copy options
     */
    copy(source: string, destination: string, options?: CopyOptions): void

    /**
     * Checks if given path exists.
     * @param filePath the absolute path
     * @returns true if given path exists, otherwise false
     */
    pathExists(filePath: string): boolean;

    /**
     * Reads a file from given path.
     * @param filePath the absolute file path
     * @param options optional read options
     * @returns the file content as string
     */
    readFile(filePath: string, options?: object): string;

    /**
     * Reads a JSON object from a file.
     * @param filePath the absolute file path
     * @returns the file content as object
     */
    readJSON(filePath: string): object;

    /**
     * Writes the given string into a file.
     * @param filepath the absolute file path
     * @param object the object to serialize to JSON
     */
    writeFile(filePath: string, content: string, skipLogFile?: boolean): void;

    /**
     * Writes the given object as JSON into a file.
     * @param filepath the absolute file path
     * @param object the object to serialize to JSON
     */
    writeJSON(filepath: string, object: object, options?: object): void;
  }

  /**
   * Options to control a copy operation.
   */
  export type CopyOptions = {

    /** An optional file copy filter. */
    filter?: CopyFilter;

    /** Indicates whether an existing destination file will be overridden or not. */
    overwrite?: boolean;

    /** Indicates whether an existing destination file will cause an error or not. */
    errorOnExists?: boolean;
  }

  /**
   * A file filter for copy operations.
   * @param source source path
   * @param destination destination path
   * @returns true of copy operation has to be performed, otherwise false 
   */
  export type CopyFilter = (sourcePath: string, destinationPath: string) => boolean;
}
