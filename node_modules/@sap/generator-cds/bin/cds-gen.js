#!/usr/bin/env node

const minimist = require('minimist');

const { format, warn } = require('../lib/helper/term');

const Constants = require('../lib/constants');
const i18n = require('../lib/i18n/i18n');
const AddCommand = require('../lib/add');
const InitCommand = require('../lib/init');
const Logger = require('../lib/helper/logger');

const defaultLogger = new Logger();

const initCommand = new InitCommand();
const addCommand = new AddCommand();

const SYSTEM_ERRORS = [
    'EvalError', 'InternalError', 'RangeError', 'ReferenceError',
    'SyntaxError', 'TypeError', 'URIError'
];

const uniqueMerge = (whiteList, ...arrays) => {
    const result = [];

    for (let array of arrays) {
        for (let item of array) {
            // only add params passed in white list, e.g. via command line
            if (whiteList.includes(item)) {
                item = item.replace(/^--/, '');

                if (!result.includes(item)) {
                    result.push(item);
                }
            }
        }
    }

    return result;
};

const main = async argv => {
    const options = { ...argv };

    // remove args from options
    delete options._;

    if (options.version || options.v || argv._[0] === 'version') {
        const packageJson = require('../package.json');
        defaultLogger.log(packageJson.version);
        return;
    }

    if (!argv._[0] || argv._[0] === 'help') {
        const helpText = initCommand.help;
        defaultLogger.log(helpText);
        return;
    }

    try {
        switch (argv._[0]) {
            case 'init':
                await initCommand.run([argv._[1]], options);
                break;

            case 'add':
                await addCommand.run(argv._, options);
                break;

            default:
                defaultLogger.error(i18n.t(i18n.command_unknown, { cmd: argv._[0] }));
        }
    } catch (err) {
        if (SYSTEM_ERRORS.includes(err.name)) {
            const txt = format(err, 'Error', true);
            defaultLogger.log(txt);
        } else if (argv.debug) {
            defaultLogger.error(err);
        } else {
            defaultLogger.error(err.message);
        }
    }
}

const options = {
    boolean: uniqueMerge(process.argv, initCommand.cmdFlags),
    string: uniqueMerge(process.argv, initCommand.cmdOptions)
}

const _argv = minimist(process.argv.slice(2), options);
main(_argv);

if (!process.env[Constants.ENV_KEY_CDS_IDE]) {
    const message = `
*******************************************************
 This cli has been deprecated. Please use @sap/cds-dk.

    npm remove -g @sap/cds
    npm install -g @sap/cds-dk
    cds help init

*******************************************************`;

    defaultLogger.log(warn(message));
}


// /* eslint no-console:0 no-eval: 0 */
